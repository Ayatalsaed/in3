$schema: http://json-schema.org/schema#
description: configuration-data, which represents the structure of the config-file.
definitions: 

    IN3NodeWeight: 
        description: a local weight of a n3-node.
        type: object
        properties:
            weight:
                description: factor the weight this noe (default 1.0)
                type: number
            responseCount:
                description: number of uses.
                type: integer
            avgResponseTime:
                description: average time of a response
                type: number
            pricePerRequest:
                description: last price
                type: integer
            lastRequest:
                description: timestamp of the last request in ms
                type: integer
            blacklistedUntil: 
                description: blacklisted because of failed requests until the timestamp
                type: integer

    IN3NodeConfig: 
        description: a config of a n3-node.
        type: object
        required: [ address,url,deposit, chainIds]
        properties:
            index :
                description : the index within the contract
                type: integer
            address:
                description: the address of the node, which is the public address it iis signing with.
                type: string
            url:
                description: the endpoint to post to
                type: string
            chainIds:
                description: the list of supported chains
                type: array
                items:
                    type: string
                    pattern: ^0x[0-9a-fA-F]+$
            deposit:
                description: the deposit of the node
                type: integer
            props:
                description: the properties of the node
                type: integer


    IN3RPCRequestConfig:
        description: additional config for a IN§ RPC-Request
        properties:
            chainId: 
                description: the requested chainId
                type: string
            includeCode: 
                description: if true, the request should include the codes of all accounts. otherwise only the the codeHash is returned. In this case the client may ask by calling eth_getCode() afterwards
                type: boolean
            verification: 
                description: defines the kind of proof the client is asking for
                type: string
                enum: [ never, proof, proofWithSignature ]
            signatures: 
                description: a list of addresses requested to sign the blockhash
                type: array
                items:
                    type: string
                    pattern: ^0x[0-9a-fA-F]+$

    Signature:
        type: object
        properties:
            address:
                type: string
                description: the address of the signing node
            block:
                type: number
                description: the blocknumber
            blockHash:
                type: string
                description: the hash of the block
            msgHash:
                type: string
                description: hash of the message
                format: bytes32
            r: 
                type: string
                description: Positive non-zero Integer signature.r
                format: hex
            s: 
                type: string
                description: Positive non-zero Integer signature.s
                format: hex
            v: 
                type: string
                description: Calculated curve point, or identity element O.
                format: hex
            
    IN3ResponseConfig:
        type: object
        description: additional config for a IN§ RPC-Request
        properties:
            proof:
                description: the Proof-data
                $ref: "#/definitions/Proof"
            lastNodeList: 
                description: the blocknumber for the last block updating the nodelist
                type: number

    IN3Config:
        description: the definition of the config-file.
        type: object
        required: [ minDeposit, requestCount, chainId]
        properties:
            nodeLimit:
                description: the limit of nodes to store in the client
                type: number
            keepIn3:
                description: if true, the in3-section of thr response will be kept. Otherwise it will be removed after validating the data.
                type: boolean
            format:
                 description: the format for sending the data to the client
                 type: string
                 enum: ["json","cbor"]
            includeCode: 
                description: if true, the request should include the codes of all accounts. otherwise only the the codeHash is returned. In this case the client may ask by calling eth_getCode() afterwards
                type: boolean
            proof: 
                description: if true the nodes should send a proof of the response
                type: boolean
            signatureCount: 
                description: number of signatures requested
                type: number
            minDeposit:
                type: number
                description: min stake of the server. Only nodes owning at least this amount will be chosen.
            requestCount:
                type: number
                min: 1
                default: 1
                description: the number of request send when getting a first answer
            timeout:
                type: number
                min: 1
                default: 1
                description: specifies the number of milliseconds before the request times out.
            chainId:
                type: string
                pattern: ^0x[0-9a-fA-F]+$
                description: servers to filter for the given chain. The chain-id based on EIP-155.
            chainRegistry:
                type: string
                pattern: ^0x[0-9a-fA-F]+$
                description: main chain-registry contract
            mainChain:
                type: string
                pattern: ^0x[0-9a-fA-F]+$
                description: main chain-id, where the chain registry is running.
            autoUpdateList:
                type: boolean
                description: if true the nodelist will be automaticly updated if the lastBlock is newer

            servers:
                type: object
                description: the nodelist per chain
                additionalProperties:
                    type: object
                    properties:
                        initAddresses:
                            description: a list of addresses which should always be part of the nodelist when getting an update
                            type: array
                            items:
                                type: string 
                        lastBlock:
                            type: integer
                            description: the blockNumber of the last event in the registry                                
                        contract:
                            type: string
                            description: the address of the registry contract
                        contractChain:
                            type: string
                            description: the chainid for the contract
                        nodeList:
                            description: the list of nodes
                            type: array
                            items:
                                $ref: "#/definitions/IN3NodeConfig"
                        nodeAuthorities:
                            description: the list of authority nodes for handling conflicts
                            type: array
                            items:
                                type: string
                        weights:
                            description: the weights of nodes depending on former performance
                            type: object
                            additionalProperties: 
                                $ref: "#/definitions/IN3NodeWeight"

    RPCRequest:
        type: object
        description: a JSONRPC-Request with N3-Extension
        required: [jsonrpc, method]
        properties:
            jsonrpc: 
                description: the version
                type: string
                enum: ["2.0"]
            method: 
                description: the method to call
                type: string
            id: 
                description: the id
                type: [string, number]
            params: 
                description: the params
                type: [ array, object]
            in3: 
                description: the IN3-Config 
                $ref: "#/definitions/IN3RPCRequestConfig"

    RPCResponse:
        type: object
        description: a JSONRPC-Responset with N3-Extension
        required: [jsonrpc, id]
        properties:
            jsonrpc: 
                description: the version
                type: string
                enum: ["2.0"]
            id: 
                description: the id matching the request
                type: [string, number]
            error: 
                description: in case of an error this needs to be set
                type: string
            result: 
                description: the params
            in3: 
                description: the IN3-Result
                $ref: "#/definitions/IN3ResponseConfig"

            in3Node:
                description: the node handling this response (internal only)
                $ref: "#/definitions/IN3NodeConfig"

    LogProof:
        type: object
        description: a Object holding proofs for event logs. The key is the blockNumber as hex
        additionalProperties:
            type: object
            required: [block, receipts]
            properties:
                block:
                    description: the serialized blockheader
                    type: string
                allReceipts:
                    description: temp. list of all receipts, which is not included in the final proof
                    type: array
                receipts:
                    description: the map of existing receipts with the txHash as key
                    type: object
                    additionalProperties:
                        type: object
                        required: [ txIndex, proof]
                        properties: 
                            txIndex: 
                                type: integer
                                description: the transactionIndex within the block
                            txProof:
                                type: array
                                description: the merkleProof
                                items:
                                    type: string
                                    pattern: ^0x[0-9a-fA-F]+$
                            proof:
                                type: array
                                description: the merkleProof
                                items:
                                    type: string
                                    pattern: ^0x[0-9a-fA-F]+$

    Proof:
        type: object
        description: the Proof-data as part of the in3-section
        required: [ type ]
        properties:
            type:
                description: the type of the proof
                type: string
                enum: [ transactionProof, receiptProof, blockProof, accountProof, callProof, logProof ]
            block:
                type: string
                description: the serialized blockheader as hex, required in most proofs 
            transactions:
                type: array
                description: the list of transactions of the block
            merkleProof: 
                type: array
                description: the serialized merle-noodes beginning with the root-node
                items:
                    type: string
                    pattern: ^0x[0-9a-fA-F]+$
            txProof: 
                type: array
                description: the serialized merkle-nodes beginning with the root-node in order to prrof the transactionIndex
                items:
                    type: string
                    pattern: ^0x[0-9a-fA-F]+$
            logProof:
                description: the Log Proof in case of a Log-Request
                $ref: "#/definitions/LogProof"
            accounts:
                type: object
                description: a map of addresses and their AccountProof
                additionalProperties:
                    $ref: "#/definitions/AccountProof"
            txIndex:
                type: integer
                description: the transactionIndex within the block
            signatures: 
                type: array
                description: requested signatures
                items:
                    $ref: "#/definitions/Signature"

    AccountProof:
        type: object
        description: the Proof-for a single Account
        required: [ accountProof, address, balance, codeHash, nonce, storageHash, storageProof ]
        properties:
            accountProof: 
                type: array
                description: the serialized merle-noodes beginning with the root-node
                items:
                    type: string
                    pattern: ^0x[0-9a-fA-F]+$
            address:
                type: string
                description: the address of this account
                pattern: ^0x[0-9a-fA-F]+$
            balance:
                type: string
                description: the balance of this account as hex
                pattern: ^0x[0-9a-fA-F]+$
            codeHash:
                type: string
                description: the codeHash of this account as hex
                pattern: ^0x[0-9a-fA-F]+$
            code:
                type: string
                description: the code of this account as hex ( if required)
                pattern: ^0x[0-9a-fA-F]+$
            nonce:
                type: string
                description: the nonce of this account as hex 
                pattern: ^0x[0-9a-fA-F]+$
            storageHash:
                type: string
                description: the storageHash of this account as hex 
                pattern: ^0x[0-9a-fA-F]+$
            storageProof:
                type: array
                description: proof for requested storage-data
                items:
                    type: object
                    required: [ key, proof, value]
                    properties: 
                        key:
                            type: string
                            description: the storage key 
                            pattern: ^0x[0-9a-fA-F]+$
                        proof:
                            type: array
                            description: the serialized merkle-noodes beginning with the root-node ( storageHash )
                            items:
                                type: string
                                pattern: ^0x[0-9a-fA-F]+$
                        value:
                            type: string
                            description: the stored value 
                            pattern: ^0x[0-9a-fA-F]+$

    ServerList:
        type: object
        description: a List of nodes
        required: [ nodes ]
        properties:
            lastBlockNumber:
                type: integer
                description: last Block number 
            nodes:
                type: array
                description: the list of nodes
                items:
                    $ref: "#/definitions/IN3NodeConfig"
            contract:
                type: string
                description: IN3 Registry 
                pattern: ^0x[0-9a-fA-F]+$
            totalServers:
                type: integer
                description: number of servers
            proof:
                $ref: "#/definitions/Proof"

    IN3RPCConfig:
        type: object
        description: the configuration for the rpc-handler
        properties:
            defaultChain:
                type: string
                description: the default chainId in case the request does not contain one.
            port:
                type: integer
                default: 8500
                description: the listeneing port for the server
            chains:
                type: object
                description: a definition of the Handler per chain
                additionalProperties:
                    $ref: "#/definitions/IN3RPCHandlerConfig"

    IN3RPCHandlerConfig:
        type: object
        description: the configuration for the rpc-handler
        required: [ rpcUrl,privateKey,registry]
        properties:
            handler:
                type: string
                description: the impl used to handle the calls
                enum: [ eth, ipfs, btc ]
            rpcUrl: 
                type: string
                description: the url of the client
            minBlockHeight:
                type: integer
                description: the minimal blockheight in order to sign
            persistentFile:
                type: string
                description: the filename of the file keeping track of the last handled blocknumber
            watchInterval:
                type: integer
                description: the number of seconds of the interval for checking for new events
            privateKey:
                type: string
                description: the private key used to sign blockhashes
            registry:
                type: string
                description: the address of the server registry used in order to update the nodeList
            registryRPC:
                type: string
                description: the url of the client in case the registry is not on the same chain.

